library("dplyr")
asset.paths <- function(s0, mu, sigma, nsims, periods)
{
nsteps = length(periods)
dt = c(periods[1], diff(periods))
drift = mu - 0.5 * sigma^2
temp = matrix(exp(drift * dt + sigma * sqrt(dt) * rnorm(nsteps * nsims)), nc=nsims)
for(i in 2:nsteps) temp[i,] = temp[i,] * temp[(i-1),]
s0 * temp
}
S = 102
K = 100
r = 0.02
sigma = 0.2
N = 100
r = 0.05
sigma = 0.2
N = 100
T = 10000
# Single Asset for 10 years
periods = (0:T)/T
prices = asset.paths(S, mu, sigma, N, periods = periods)
mu = 0.02
prices = asset.paths(S, mu, sigma, N, periods = periods)
prices
periods
# Single Asset for 10 years
p = (0:T)/T
prices = asset.paths(S, mu, sigma, N, p)
prices
p
prices = asset.paths(S, mu, sigma, N, p)
prices
size(prices)
size(prices)
library("dplyr")
size(prices)
size(prices)
install.packages("arules")
library("arules")
size(prices)
size
prices
library("dplyr")
asset.paths <- function(s0, mu, sigma, nsims, periods)
{
nsteps = length(periods)
dt = c(periods[1], diff(periods))
drift = mu - 0.5 * sigma^2
temp = matrix(exp(drift * dt + sigma * sqrt(dt) * rnorm(nsteps * nsims)), nc=nsims)
for(i in 2:nsteps) temp[i,] = temp[i,] * temp[(i-1),]
s0 * temp
}
S = 102
K = 100
mu = 0.02
r = 0.05
sigma = 0.2
N = 100
T = 10000
# Single Asset for 10 years
p = (0:T)/T
prices = asset.paths(S, mu, sigma, N, p)
prices
size(prices)
View(prices)
View(prices)
call = array(numeric(), size(prices))
ex_otu_ord  <- prices
ex_otu_ord <- ex_otu_ord[-1]
ex_otu_ord <- as.matrix(ex_otu_ord)
size(ex_otu_ord)
prices = as.numeric(asset.paths(S, mu, sigma, N, p))
# plot
matplot(prices[,1:100], type='l', xlab='Time split of 1 year', ylab='Prices',
main='Selected Price Paths')
prices
# plot
matplot(prices, type='l', xlab='Time split of 1 year', ylab='Prices',
main='Selected Price Paths')
T = 1000
# Single Asset for 10 years
p = (0:T)/T
prices = asset.paths(S, mu, sigma, N, p)
# plot
matplot(prices, type='l', xlab='Time split of 1 year', ylab='Prices',
main='Selected Price Paths')
size(prices)
call = array(numeric(), size(N, T))
call = array(numeric(), N, T)
call = array(numeric(), c(N, T))
View(call)
call = array(numeric(), c(T+1, N))
put = array(numeric(), size(prices))
View(call)
View(call)
t = (0:T)/T
t
tt
tt = T - t
tt
tt = 1 - t
tt
ttt = tt
for(i in 1:N){
ttt = ttt = cbind(ttt, tt)
}
N
ttt
View(ttt)
size(ttt)
S = prices
S
ST = S[T+1,]
ST
ST = S[T+1,]
for(i in 1:N){
ST = rbind(ST, S[T+1,])
}
# european call
d1 <- (log(S/K) + (r + sigma^2/2) * ttt)/(sigma * sqrt(ttt))
d2 <- d1 - sigma * sqrt(ttt)
# european call
d1 <- (log(S/K) + (r + sigma^2/2) * ttt)/(sigma * sqrt(ttt))
d2 <- d1 - sigma * sqrt(ttt)
# european call
d1 <- (log(S/K) + (r + sigma^2/2) * ttt)/(sigma * sqrt(ttt))
ttt
View(ttt)
View(S)
for(i in 1:T){
ST = rbind(ST, S[T+1,])
}
# european call
d1 <- (log(S/K) + (r + sigma^2/2) * ttt)/(sigma * sqrt(ttt))
